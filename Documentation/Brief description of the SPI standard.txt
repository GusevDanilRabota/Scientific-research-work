ОПИСАНИЕ

SPI bus (Serial Peripheral Interface - последовательный перефирийный интерфейс) - последовательный синхронный стандарт передачи данных
    в режиме полного дуплекса (двухнаправленный), предназначеный для обеспечения простого и недорогого высокоскоростного сопряжения
    микроконтроллеров и переферии.
SPI является синхронным интерфейсом, в котором любая передача синхронизована с общим тактовым сигналом, генерируемым ведущим устройством.
Принимающая (ведомая) переферия синхронизирует получение битовой последовательности с тактовым сигналом.
К одному последовательному переферийному интерфейсу ведущего устройства-микросхемы может присоединяться несколько микросхем.
Ведущее устройство выбирает ведомое для передачи, активируя сигнал «выбор кристалла (chip select)» на ведомой микросхеме.
Периферия, не выбранная процессором, не принимает участия в передаче по SPI.



ИНТЕРФЕЙС

В SPI используются четыре цифровых сигнала:
    -> MOSI — выход ведущего, вход ведомого (Master Out Slave In) - служит для передачи данных от ведущего устройства ведомому.
    -> MISO — вход ведущего, выход ведомого (Master In Slave Out) - служит для передачи данных от ведомого устройства ведущему.
    -> SCLK или SCK — последовательный тактовый сигнал (Serial Clock) - служит для передачи тактового сигнала для ведомых устройств.
    -> CS или SS — выбор микросхемы, выбор ведомого (Chip Select, Slave Select).
Конкретные имена портов интерфейса SPI могут различаться в зависимости от производителя аппаратных средств, при этом возможны следующие варианты:
Порт    Ведуший                 Ведомых
MISO    SOMI, SDI, RX           SOMI, SDO, TX
MOSI    SIMO, SDO, TX           SIMO, SDI, RX
SCLK    SCK, CLK, SPC (Serial Port Clock, SPI)
SS      nCS, CS, CSB, CSN, NSS, nSS, STE, SYN



СИНХРОНИЗАЦИЯ В SPI

Частота следования битовых интервалов в линиях передачи данных определяется синхросигналом SCK, который генерирует ведущее устройство, 
    ведомые устройства используют синхросигнал для определения моментов изменения битов на линии данных, при этом ведомые устройства никак 
    не могут влиять на частоту следования битовых интервалов.

ПРИЁМ И ПЕРЕДАЧА ДАННЫХ В SPI

Передача осуществляется пакетами.
Длина пакета, как правило, составляет слово в 8 bit (далее B - byte), при этом есть реализации с длиной 4 B.
Ведущее устройство инициирует цикл связи установкой низкого уровня на выводе выбора подчинённого устройства SS того устройства, с которым
необходимо установить соединение.
При низком уровне сигнала SS:
    -> схемотехника ведомого устройства находится в активном состоянии;
    -> вывод MISO переводится в режим "выход";
    -> тактовый сигнал SCLK от ведущего устройства воспринимается ведомым и вызывает считывание значений передаваемых от ведущего
        битов и сдвигов регистров ведомого устройства.
Подлежашие передаче данные ведущее и ведомое устройства перемещают в сдвиговые регистры.
После этого ведущее устройство начинает генерировать импульсы синхронизации на линии SCLK, что приводит к взаимному обмену данными.
Передача осуществляется бит за битом от ведущего по линии MOSI и от ведомого по линии MISO.
Передача осуществляется, как правило, начиная со старших битов, но некоторые производители допускают изменение порядка
    передачи битов программными методами.
После передачи каждого пакета данных ведущее устройство, в целях синхронизации ведомого устройства, может перевести линию SS в высокое состояние.



РЕЖИМЫ РАБОТЫ ИНТЕРФЕЙСА SPI

Возможны четыре режима синхронизации.
Режим определяется комбинацией бит CPHA и CPOL:
    -> CPOL = 0 - исходное состояние сигнала синхронизации - низкий уровень;
    -> CPOL = 1 - исходное состояние сигнала синхронизации - высокий уровень;
    -> CPHA = 0 - выборка данных производится по переднему фронту (переключению) сигнала синхронизации.
        То есть по переключению из основного в противоположное ему;
    -> CPHA = 1 - выборка данных производится по заднему фронту (переключению) сигнала синхронизации.
        То есть по переключению обратного к основному из противоположного.
Для обозначения режимов работы интерфейса SPI принято следующее соглашение:
    -> режим 0 (CPOL = 0, CPHA = 0);
    -> режим 1 (CPOL = 0, CPHA = 1);
    -> режим 2 (CPOL = 1, CPHA = 0);
    -> режим 3 (CPOL = 1, CPHA = 1).
Временная диограмма представлена в файле SPI_timing_diagram1.png и SPI_timing_diagram2.png.



ТОПОЛОГИЯ СИСТЕМЫ СВЯЗИ НА БАЗЕ SPI

В простейшем случае к ведущему устройству подключено единственное ведомое устройство и необходим двусторонний обмен данными.
В таком случае используется трехпроводная схема подключения..
Интерфейс SPI позволяет подключать к одному ведущему устройству несколько ведомых устройств, причем подключение может быть 
    осуществлено несколькими способами.

Первый способ позволяет реализовать радиальную структуру связи SPI_three_slaves1.png (топология типа "звезда"), его принято считать основным
    способом подключения нескольких ведомых устройств.
В данном случае для обмена более чем с одним ведомым устройством ведущее устройство должно формировать соответствующее
    количество сигналов выбора ведомого устройства (SS).
При обмене данными с ведомым устройством, соответствующий ему сигнал SS переводится в активное (низкое) состояние,
    при этом все остальные сигналы SS находятся в неактивном (высоком) состоянии.
Выводы данных MISO ведомых устройств соединены параллельно, при этом они находятся в неактивном состоянии,
    а перед началом обмена один из выходов (выбранного ведомого устройства) переходит в активный режим.

Второй способ позволяет реализовать структуру связи типа "кольцо" SPI_three_slaves2.png.
В данном случае для активации одновременно нескольких ведомых устройств используется один сигнал SS,
    а выводы данных всех устройств соединены последовательно и образуют замкнутую цепь.
При передаче пакета от ведущего устройства этот пакет получает первое ведомое устройство, которое, в свою очередь,
    транслирует свой пакет следующему ведомому устройству и так далее.
Для того, чтобы пакет от ведущего устройства достиг определенного ведомого устройства, ведущее устройство должно отправить еще несколько пакетов.



ПРОГРАММНАЯ РЕАЛИЗАЦИЯ

https://pypi.org/project/spidev/
Этот проект содержит модуль Python для взаимодействия с устройствами SPI из пользовательского пространства с помощью драйвера ядра Linux spidev.
Весь код лицензирован MIT, если явно не указано иное.
ИСПОЛЬЗОВАНИЕ
    import spidev
    spi = spidev.SpiDev()
    spi.open(bus, device)
    to_send = [0x01, 0x02, 0x03]
    spi.xfer(to_send)
НАСТРОЙКИ
    import spidev
    spi = spidev.SpiDev()
    spi.open(bus, device)

    # Settings (for example)
    spi.max_speed_hz = 5000
    spi.mode = 0b01
...